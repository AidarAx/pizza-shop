generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String   @unique
  password String
  role     UserRole @default(USER)

  provider   String?
  providerId String?

  cart             Cart?
  order            Order[]
  verificationCode VerificationCode?

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String

  ingredient Ingredient[]

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  ProductVariants ProductVariants[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model ProductVariants {
  id Int @id @default(autoincrement())

  price     Int
  size      Int?
  pizzaType Int?

  items CartItems[]

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String
  price    String
  imageUrl String

  products Product[]

  cartItems CartItems[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  cartItems CartItems[]

  token String

  totalAmount Int @default(0)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model CartItems {
  id Int @id @default(autoincrement())

  cart   Cart? @relation(fields: [cartId], references: [id])
  cartId Int?

  productVariants   ProductVariants? @relation(fields: [productVariantsId], references: [id])
  productVariantsId Int?

  ingredient Ingredient[]

  quantity Int

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  token String

  totalAmount Int
  status      OrderStatus
  paymentId   String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  items Json

  fullName String
  email    String
  phone    String
  address  String
  comment  String

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code String

  createAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  ADMIN
  USER
}
